import os
import tkinter as tk
import ttkbootstrap as tb
from tkinter import messagebox
from dotenv import load_dotenv
from datetime import datetime
import pytz
import google.generativeai as genai
from gtts import gTTS
import speech_recognition as sr
import pygame
import threading
import requests
from io import BytesIO
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è ALSA/JACK –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
os.environ['SDL_AUDIODRIVER'] = 'pulseaudio'

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
print("Loaded GEMINI_API_KEY:", os.getenv("GEMINI_API_KEY")[:8] + "..." if os.getenv("GEMINI_API_KEY") else "None")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API
try:
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
    print("Gemini API configured successfully")
except Exception as e:
    print(f"Failed to configure Gemini API: {e}")
    genai.configure(api_key=None)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è –∞—É–¥–∏–æ
try:
    pygame.mixer.init()
    print("Pygame audio initialized successfully")
except Exception as e:
    print(f"Failed to initialize Pygame audio: {e}")

# –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
current_time = datetime.now(pytz.timezone('Europe/Paris'))  # CEST
formatted_time = current_time.strftime("%I:%M %p CEST on %A, %B %d, %Y")  # 10:17 PM CEST on Wednesday, May 14, 2025

# –Ø–∑—ã–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –æ–±—É—á–µ–Ω–∏—è
LANGUAGES_UI = {
    "–†—É—Å—Å–∫–∏–π": "ru",
    "English": "en"
}

LANGUAGES_LEARN = {
    "–ù–µ–º–µ—Ü–∫–∏–π (Deutsch)": "de"
}

# –¢–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
UI_TEXT = {
    "ru": {
        "title": "languageApp ‚Äî –æ—Ç hamsterfuchs",
        "context": "–î–∏–∞–ª–æ–≥: ",
        "listen": "üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å",
        "speak": "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å",
        "next": "‚Ü∫ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        "ai": "–ò–ò-–∫–∞—Å—Å–∏—Ä: ",
        "you_said": "–í—ã —Å–∫–∞–∑–∞–ª–∏: ",
        "error": "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
        "api_key": "‚öôÔ∏è API –ö–ª—é—á",
        "check_balance": "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò-–∫–∞—Å—Å–∏—Ä–æ–º –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º.",
        "current_time": f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {formatted_time}",
        "no_internet": "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (ping google.com) –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        "mic_error": "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ (arecord -d 5 test.wav) –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.",
        "timeout": "–¢–∞–π–º–∞—É—Ç: —Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω.",
        "api_error": "–û—à–∏–±–∫–∞ API Gemini: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á (https://aistudio.google.com/app/apikey) –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.",
        "tts_error": "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gTTS –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        "general_error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: —Å–º. –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é.",
        "speech_retry": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é –≤ –ø–æ–ª–µ –≤—ã—à–µ."
    },
    "en": {
        "title": "languageApp ‚Äî by hamsterfuchs",
        "context": "Dialogue: ",
        "listen": "üîä Listen",
        "speak": "üé§ Speak",
        "next": "‚Ü∫ Start Over",
        "ai": "AI Cashier: ",
        "you_said": "You said: ",
        "error": "Speech not recognized",
        "api_key": "‚öôÔ∏è API Key",
        "check_balance": "üí∞ Check Status",
        "welcome": "Welcome! Start a conversation with the AI cashier in German.",
        "current_time": f"Current time: {formatted_time}",
        "no_internet": "No internet connection. Check your network (ping google.com) and restart the app.",
        "mic_error": "Microphone not found or not working. Check audio settings (arecord -d 5 test.wav) and microphone connection.",
        "timeout": "Timeout: Please speak within 15 seconds. Ensure the microphone is active.",
        "api_error": "Gemini API error: Check your key (https://aistudio.google.com/app/apikey) and internet.",
        "tts_error": "Text-to-Speech error: Check your internet and ensure gTTS is installed correctly.",
        "general_error": "Unknown error: See console for details and seek assistance.",
        "speech_retry": "Failed to recognize speech. Try again or enter text manually in the field above."
    }
}

class LanguageApp:
    def __init__(self, root):
        self.root = root
        self.ui_lang = "ru"
        self.learn_lang = "de"
        self.conversation = [{"role": "system", "content": "You are a friendly cashier. Respond in German."}]
        self.setup_ui()

    def setup_ui(self):
        self.frame = tb.Frame(self.root, padding=20)
        self.frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tb.Label(self.frame, text="ü§ñ –†–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º", font=("Helvetica", 16, "bold")).pack(pady=10)

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        tb.Label(self.frame, text=UI_TEXT[self.ui_lang]["current_time"], font=("Helvetica", 10)).pack(pady=5)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —è–∑—ã–∫–∞
        self.ui_var = tk.StringVar(value="–†—É—Å—Å–∫–∏–π")
        self.ui_menu = tb.OptionMenu(self.frame, self.ui_var, "–†—É—Å—Å–∫–∏–π", *LANGUAGES_UI.keys(), command=self.set_ui_lang)
        self.ui_menu.pack(side="top", pady=5)

        self.learn_var = tk.StringVar(value="–ù–µ–º–µ—Ü–∫–∏–π (Deutsch)")
        self.learn_menu = tb.OptionMenu(self.frame, self.learn_var, "–ù–µ–º–µ—Ü–∫–∏–π (Deutsch)", *LANGUAGES_LEARN.keys(), command=self.set_learn_lang)
        self.learn_menu.pack(side="top", pady=5)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        self.context_label = tb.Label(self.frame, text="", font=("Helvetica", 14, "bold"))
        self.context_label.pack(pady=10)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.prompt_entry = tb.Entry(self.frame, font=("Helvetica", 16), width=50)
        self.prompt_entry.pack(pady=5)

        # –û—Ç–≤–µ—Ç –ò–ò
        self.ai_label = tb.Label(self.frame, text="", font=("Helvetica", 12, "italic"), foreground="#00FFAA")
        self.ai_label.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tb.Frame(self.frame)
        btn_frame.pack()

        self.listen_btn = tb.Button(btn_frame, text="", command=self.play_text)
        self.listen_btn.pack(side="left", padx=5)

        self.speak_btn = tb.Button(btn_frame, text="", command=self.recognize_speech)
        self.speak_btn.pack(side="left", padx=5)

        self.next_btn = tb.Button(btn_frame, text="", command=self.reset_conversation)
        self.next_btn.pack(side="left", padx=5)

        tb.Button(btn_frame, text="", command=self.set_api_key).pack(side="left", padx=5)
        tb.Button(btn_frame, text="", command=self.check_status).pack(side="left", padx=5)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.response_label = tb.Label(self.frame, text="", font=("Helvetica", 12), foreground="lightgreen")
        self.response_label.pack(pady=10)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.response_label.config(text=UI_TEXT[self.ui_lang]["welcome"])
        self.update_ui_labels()
        self.start_conversation()

    def set_ui_lang(self, choice):
        self.ui_lang = LANGUAGES_UI[choice]
        self.update_ui_labels()

    def set_learn_lang(self, choice):
        self.learn_lang = LANGUAGES_LEARN[choice]

    def update_ui_labels(self):
        t = UI_TEXT[self.ui_lang]
        self.root.title(t["title"])
        self.context_label.config(text=f"{t['context']}")
        self.listen_btn.config(text=t["listen"])
        self.speak_btn.config(text=t["speak"])
        self.next_btn.config(text=t["next"])

    def start_conversation(self):
        self.conversation = [{"role": "system", "content": "You are a friendly cashier. Respond in German."}]
        self.generate_ai_response("Hallo! Wie kann ich Ihnen helfen?")  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –ò–ò

    def reset_conversation(self):
        self.conversation = [{"role": "system", "content": "You are a friendly cashier. Respond in German."}]
        self.ai_label.config(text="")
        self.response_label.config(text=UI_TEXT[self.ui_lang]["welcome"])
        self.generate_ai_response("Hallo! Wie kann ich Ihnen helfen?")  # –ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç

    def generate_ai_response(self, user_input=""):
        if user_input:
            self.conversation.append({"role": "user", "content": user_input})
        def task():
            try:
                model = genai.GenerativeModel("gemini-1.5-flash")
                response = model.generate_content([part["content"] for part in self.conversation])
                answer = response.text
                self.conversation.append({"role": "model", "content": answer})
                self.ai_label.config(text=f"{UI_TEXT[self.ui_lang]['ai']}{answer}")
            except genai.errors.APIError as e:
                error_msg = f"{UI_TEXT[self.ui_lang]['api_error']} –ö–æ–¥: {e.code}, –°–æ–æ–±—â–µ–Ω–∏–µ: {e.message}"
                self.ai_label.config(text=error_msg)
                messagebox.showwarning("API –û—à–∏–±–∫–∞", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
                print(f"API Error: {traceback.format_exc()}")
            except Exception as e:
                error_msg = f"{UI_TEXT[self.ui_lang]['general_error']}"
                self.ai_label.config(text=error_msg)
                messagebox.showwarning("–û—à–∏–±–∫–∞", f"{error_msg}\n–î–µ—Ç–∞–ª–∏: {str(e)}")
                print(f"General Error: {traceback.format_exc()}")
        threading.Thread(target=task).start()

    def play_text(self):
        text = self.ai_label.cget("text").replace(UI_TEXT[self.ui_lang]["ai"], "").strip()
        if not text:
            text = self.response_label.cget("text").replace(UI_TEXT[self.ui_lang]["you_said"], "").strip()
        try:
            tts = gTTS(text=text, lang=self.learn_lang)
            fp = BytesIO()
            tts.write_to_fp(fp)
            fp.seek(0)
            pygame.mixer.music.load(fp, "mp3")
            pygame.mixer.music.play()
        except ValueError as e:
            error_msg = f"{UI_TEXT[self.ui_lang]['tts_error']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: {str(e)}"
            self.response_label.config(text=error_msg)
            messagebox.showwarning("TTS –û—à–∏–±–∫–∞", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π.")
            print(f"TTS Value Error: {traceback.format_exc()}")
        except Exception as e:
            error_msg = f"{UI_TEXT[self.ui_lang]['tts_error']} –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            self.response_label.config(text=error_msg)
            messagebox.showwarning("TTS –û—à–∏–±–∫–∞", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ gTTS.")
            print(f"TTS Error: {traceback.format_exc()}")

    def recognize_speech(self):
        def task():
            r = sr.Recognizer()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            try:
                requests.get("https://www.google.com", timeout=5)
            except requests.ConnectionError:
                error_msg = UI_TEXT[self.ui_lang]["no_internet"]
                self.response_label.config(text=error_msg)
                messagebox.showwarning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
                print(f"Network Error: {traceback.format_exc()}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            try:
                with sr.Microphone() as source:
                    r.adjust_for_ambient_noise(source, duration=3)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥
                    self.response_label.config(text=UI_TEXT[self.ui_lang]["timeout"])
                    audio = r.listen(source, timeout=15, phrase_time_limit=15)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
                    text = r.recognize_google(audio, language="de-DE")
                    self.response_label.config(text=f"{UI_TEXT[self.ui_lang]['you_said']}{text}")
                    self.generate_ai_response(text)
            except sr.UnknownValueError:
                error_msg = UI_TEXT[self.ui_lang]["error"]
                self.response_label.config(text=error_msg)
                messagebox.showwarning("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏", f"{error_msg}\n–ü—Ä–∏—á–∏–Ω–∞: –ù–µ—è—Å–Ω–∞—è —Ä–µ—á—å –∏–ª–∏ —à—É–º.\n–†–µ—à–µ–Ω–∏–µ: {UI_TEXT[self.ui_lang]['speech_retry']}")
                print(f"Speech Recognition: Unknown value error - {traceback.format_exc()}")
            except sr.RequestError as e:
                error_msg = f"Speech error: {str(e)}"
                self.response_label.config(text=error_msg)
                messagebox.showwarning("–ó–∞–ø—Ä–æ—Å –æ—à–∏–±–∫–∏", f"{error_msg}\n–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å Google API.\n–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
                print(f"Speech Recognition Request Error: {traceback.format_exc()}")
            except sr.WaitTimeoutError:
                error_msg = UI_TEXT[self.ui_lang]["timeout"]
                self.response_label.config(text=error_msg)
                messagebox.showwarning("–¢–∞–π–º–∞—É—Ç", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥.")
                print(f"Speech Recognition: Timeout error - {traceback.format_exc()}")
            except sr.MicrophoneException:
                error_msg = UI_TEXT[self.ui_lang]["mic_error"]
                self.response_label.config(text=error_msg)
                messagebox.showwarning("–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞.")
                print(f"Speech Recognition: Microphone error - {traceback.format_exc()}")
            except Exception as e:
                error_msg = f"Speech error: {str(e)}"
                self.response_label.config(text=error_msg)
                messagebox.showwarning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –°–º. –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
                print(f"Speech Recognition: Unexpected error - {traceback.format_exc()}")
        threading.Thread(target=task).start()

    def set_api_key(self):
        win = tb.Toplevel(self.root)
        win.title("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞")

        tk.Label(win, text="Gemini API –ö–ª—é—á:", font=("Helvetica", 12)).pack(pady=5)
        gemini_key_var = tk.StringVar()
        gemini_key_entry = tb.Entry(win, textvariable=gemini_key_var, width=60)
        gemini_key_entry.pack(pady=5)

        def save_key():
            gemini_key = gemini_key_var.get().strip()
            if gemini_key and not gemini_key.startswith("AI"):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π Gemini –∫–ª—é—á")
                return
            with open(".env", "w") as f:
                if gemini_key:
                    f.write(f"GEMINI_API_KEY={gemini_key}\n")
            try:
                genai.configure(api_key=gemini_key or os.getenv("GEMINI_API_KEY"))
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            except Exception as e:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini: {str(e)}"
                messagebox.showwarning("–û—à–∏–±–∫–∞", f"{error_msg}\n–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
                print(f"API Config Error: {traceback.format_exc()}")
            win.destroy()

        tb.Button(win, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_key).pack(pady=10)

    def check_status(self):
        def task():
            status = []
            try:
                genai.GenerativeModel("gemini-1.5-flash").generate_content("Test")
                status.append("Gemini: –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω")
            except Exception as e:
                status.append(f"Gemini: –û—à–∏–±–∫–∞ - {str(e)}")
                messagebox.showwarning("–°—Ç–∞—Ç—É—Å API", f"–û—à–∏–±–∫–∞: {str(e)}\n–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
                print(f"Status Check Error: {traceback.format_exc()}")
            self.response_label.config(text="\n".join(status))
        threading.Thread(target=task).start()

if __name__ == "__main__":
    root = tb.Window(themename="superhero")
    app = LanguageApp(root)
    root.mainloop()
