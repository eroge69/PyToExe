# README
# Application that takes the data from the Excel generated by the Google Forms and
# fills in the pdf-form of the iclub
#
# INPUT: Nothing really, but you have to have the Excel of the Google form downloaded
# and saved under
file_path = "./excel_iclub.xlsx"
# Moreover, the pdf-file Teilnehmerlist (cf. Google Drive document) got to be in:
pdf_path = "./Teilnehmerliste.pdf"
#
# OUTPUT: You receive the fully filled pdf (Event, Date and Tutors as well as the price
# are still missing) under the link:
output_pdf_path = "./Teilnehmerliste_filled_in.pdf"


#-----------------------------------------------------------------------------------------#
#-------------------------------- Author: Tobias Staub -----------------------------------#
#--------- !!!  Do NOT change things, if you do NOT know what you are doing  !!! ---------#
#-----------------------------------------------------------------------------------------#

from numpy import linspace
from pandas import read_excel
from io import BytesIO
from PyPDF2 import PdfReader, PdfWriter
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Function that reads the excel file given in the file path
# (got to be the one generated by the Google forms)
def excel_to_dataframe(file_path):
    # Read the Excel file into a DataFrame
    df = read_excel(file_path)

    rel_col_names = ['E-Mail-Adresse', 'First Name', 'Last Name', 'Country of Origin', 'Phone Number', 'Exchange Type']

    # Select only the relevant columns
    reduced_df = df[rel_col_names].copy()

    # Convert 'Phone Number' column values to strings
    reduced_df['Phone Number'] = reduced_df['Phone Number'].astype(str)

    for i in range(len(reduced_df['Phone Number'])):
        reduced_df.loc[i, 'Phone Number'] = reduced_df.loc[i, 'Phone Number'].strip().replace(' ', '')

    return reduced_df


# Transforms the df generated by excel_to_dataframe to the excel, we need for
# the pdf form
def get_df_for_pdf(df_from_excel):
    # Select the desired columns from the original DataFrame
    df = df_from_excel[['Phone Number', 'Country of Origin', 'Exchange Type']]

    # Copy in order to avoid dependencies
    df = df.copy()

    # Create a new 'Name' column by concatenating 'First Name' and 'Last Name'
    df['Name'] = df_from_excel['First Name'].astype(str) + ' ' + df_from_excel['Last Name'].astype(str)

    for i in range(len(df['Country of Origin'])):
        df.loc[i, 'Country of Origin'] = df.loc[i, 'Country of Origin'].strip()
        df.loc[i, 'Name'] = df.loc[i, 'Name'].strip()
        if len(df.loc[i, 'Country of Origin']) > 18:
            list_of_strings = df.loc[i, 'Country of Origin'].split()
            df.loc[i, 'Country of Origin'] = ''
            for word in list_of_strings:
                df.loc[i, 'Country of Origin'] += word[0] if word[0].isupper() else ''
            # somebody only used small letters
            if len(df.loc[i, 'Country of Origin']) == 0:
                for word in list_of_strings:
                    df.loc[i, 'Country of Origin'] += word[0]

        if len(df.loc[i, 'Name']) > 26:
            list_of_names = df.loc[i, 'Name'].split()
            df.loc[i, 'Name'] = ''
            for k, name in enumerate(list_of_names):
                df.loc[i, 'Name'] += name + ' '
                # If name is too long, because there are multiple names
                if len(df.loc[i, 'Name'].strip()) > 26 and k>=1:
                    new_list_of_names = df.loc[i, 'Name'].split()
                    df.loc[i, 'Name'] = ''
                    for iii in range(0, k):
                        df.loc[i, 'Name'] += new_list_of_names[iii] + ' '
                    # df.loc[i, 'Name'] -= name
                    for kkk in range(k, len(list_of_names)):
                        df.loc[i, 'Name'] += list_of_names[kkk][0] + '. '
                    break
                # first name is too long
                elif len(df.loc[i, 'Name'].strip()) > 26 and k==0:
                    # df.loc[i, 'Name'] -= name
                    df.loc[i, 'Name'] = name[0:25]
                    break


    return df


# Generates a new pdf, that contains the text given in the text_list and writes
# it at (x_list[i], y_list[i])
def create_new_pdf_with_text_for_one_page(text_list, x_list, y_list):

    packet = BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)

    for i in range(len(text_list)):
        can.drawString(x_list[i], y_list[i], text_list[i])

    can.save()

    packet.seek(0)

    new_pdf = PdfReader(packet)

    return new_pdf


#----------------------------------- MAIN ------------------------------------------#










print('                                ,╓▄▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄▄▄,')
print('                            ╓▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄▄,')
print('                        ,▄▓▓▓▓▓▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▓▓▓▄╖')
print('                      ▄▓▓▓▓▓▓▓▓▓▓▓▓▀▄▓▓▓▓▓▓▓▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▓▓▓▓▄,')
print('                   ,▄▓▓▓▓▓▓▓▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓Ω▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓╖')
print('                  ▄▓╣▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓╖')
print('                ╔▓▀▄▓▓▓▓▓▓▓▓▓▓▓▓▓▌▓▓▓▓▓▓▓▓Ü▓▓▓▓▓▓▓▓▓▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄')
print('               ▄▓╓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▐▓▓▓▓▓▓▓─▓▓▓▓▓▓▓▓▌▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓┐')
print('              ╬▓╔▓▓▓▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌ Å▓▓▓▓▓▓▀▀▓▓▓▓▓▓▓▀▀▀▓▓▓▓▓▓▓▓▓▓▓░')
print('             ╫▓╔▓▓▓▓▓▓▓▀▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓,  ▐▓▓▓▓▓▀▀▄▄▓▓▓▓╝    ^▀▓▓▓▓▓▓▓▓▓░')
print("            ╔▓▄▓▓▓▓▓▓▓▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓   ▓▓▓▓▓▓▓▓▓▓,M          ╝▓▓▓▓▓▓▓▓░")
print("            ▓▓▓▓▓▓▓▓▓▄▓▓▓▓▓▓▓▓▓▓▓  ║  ▓▓▓▓ ▓▓▓▓▓▓▓▓▓`    ▄, w      '▀▓▓▓▓▓▓▒")
print("           ]▓▓▓▓▓▓▓▓]▓▓▓▓▓▓▓▓▓▓▓▓n¡⌡  ▓▓▓▓ ▓▓▓▓▓▓▓▌═▀▀▓▓▓▄         ,╚▀▓▓▓▓╣▓░")
print('           ╠▓▓▓▓▓▓▓▓▐▓▓▓▓▓▓▓▓▓▓▓▓  [  ▓▓▓▓ ▓▓▓▓▓▓"        *    ▓▓▄ ▓▓Ü▓▓▓▓▓▓▒')
print('           ╠▓▓▓▓▓▓▓▓▐▓▓▀▀▀▀▀▀▀▀▀▀     ▓▓▓▓ ╠▓▓▓▓M          "\√▓▓▓▓▓▓▓▌▓▓▓▓▓▓▒')
print('           ╠▓▓▓▓▓▓▓▓▌▀                ╠▓▓▌ "▓▓▓▓▓▄,╓,        ╓▓▓▓▓▓▓▓U▓▓▓▓╫▓▒')
print('           ]▓▓▓▓▓▓▓▓▓▄                ╠▓▓   ▀▓▓▓▓▓▓▓▓▌      ╬▓▓▓▓▓▓▓▌▓▓▓▓▌╢▓▒')
print('            ▓▓▓▓▓▓▓▓▓▓▓,Γ$  ▌▐ Hφ] Γ  ▐▓ ╔▓▓ ▀▓▓▓▓▓▓▓▓▌    ,▄▀▓▓▓▓▓▀▓▓▓▓▓Ü╬▌░')
print("            ╟▓▓▓▓▓▓▓▓▓▓▓▓▄, `'  `  `  ▄▄▓▓▓▓▓▄▀▓▓▓▓▓▓▓▓▄  ╓▓▓▓▓▓▓▓▄▓▓▓▓▓▌╟▓▒")
print("             ╫▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄▄▄▄▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▓▓▓▀▓▄▓▓▓▓▓▓▓]▓╣░")
print('              ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒╫▓▒')
print('               ╫▓▓▓▓▓▓▓▓▓▓▌▓▀▓▀▓▀▓▓▓▀▀▓▀▓▀▌▓▀▓▓▀▓▀▓▀▓▓▀▓▌▓▓▓▀▀▓▓▓▓▓▓▓▓▓▓▓▒')
print('                ╫▓▓▓▓▓▓▓▓▓▌▌▓▐▄▌Z▓▐▓╠▄▄▓▓▄▌▌▓▄▄▌▌▓▄▄▓▓▄▓▌▌▓▄▐▌▓▓▓▓▓▓▓▓▓╣░')
print('                 ╙╣▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▀▓▓▓▀▓▀▓▓▓▓▓▓▀▓▓▓▓▓▓▓▓▓▓▓╫▓╩`')
print('                   ╨╣▓▓▓▓▓▌▓▐▐▄▄▓▄▄▓▓▐▓▓▐▐▐▐▄▄▓▐▄▐▐▄▐▄▄▓▐▄▄Q▄▌▓▓▓▓╫▓╣┘')
print('                     ╨╣▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀╜')
print('                       ╙╫╣▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓╜`')
print('                          ╙╨╢╢▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀╜`')
print('                             `╙╨╫╫╣╢▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓╬╣▓▀╜`')
print('                                   `╙╜╨╨▀╝╢╢╣╣▀▀▀╨╜╜``')
print('     ')
print('     ')
print('                                 ')





print('Load Excel into Python.')
df_from_excel = excel_to_dataframe(file_path)

print('Get the relevant Dataframe from the Excel.')
df = get_df_for_pdf(df_from_excel)


x_Name = 67
x_Mobile = 235
x_Country = 350
x_ERASMUS = 467
x_Other_Exchange = 502.5
x_Tutor = 538

y_bottom_1 = 93
y_bottom_2345 = 95
delta_y = 27.41
y_top_1 = y_bottom_1 + 7 * delta_y
y_top_2345 = y_bottom_2345 + 15 * delta_y

# the height of the tutors
x_tutors = 210
y_tutors = 465


existing_pdf = PdfReader(open(pdf_path, "rb"))
# Create a PDF writer object
output = PdfWriter()

number_of_participants = len(df['Name'])

if number_of_participants <= 7:
    max_num_pages = 0
elif number_of_participants <= 23:
    max_num_pages = 1
elif number_of_participants <= 39:
    max_num_pages = 2
elif number_of_participants <= 55:
    max_num_pages = 3
else:
    max_num_pages = 4

print('Create new pdf-file.')

for page_num in range(max_num_pages+1):

    print(f'Create page {page_num+1}.')

    # First page is special!
    if page_num == 0:
        # Fill-in the participant's list
        y_top = y_top_1
        number_max = number_of_participants
        participants_on_page = min(number_max, 8)
        y_list = linspace(y_top, y_bottom_1, 8).tolist()[0:participants_on_page]
        # Create the lists of elements that should be written on the newly created pdf
        input_Name_list = df.loc[0:participants_on_page-1, 'Name'].tolist()
        input_Mobile_list = df.loc[0:participants_on_page-1, 'Phone Number'].tolist()
        input_Country_list = df.loc[0:participants_on_page-1, 'Country of Origin'].tolist()
        input_Exchange_list = ['X'] * len(y_list)
        x_Exchange_list = [x_ERASMUS if exchange_type == 'Erasmus (Hochschule München!)' else x_Tutor if exchange_type == 'Tutor' else x_Other_Exchange for exchange_type in df.loc[0:7, 'Exchange Type']]


        # Fill-in the names of the organizers (tutors)
        list_of_tutor_names = [df.loc[i, 'Name'] for i in range(len(df['Name'])) if df.loc[i, 'Exchange Type'] == 'Tutor']
        tutor_string = list_of_tutor_names[0]
        for tutor_name in list_of_tutor_names[1:]:
            tutor_string += ',  ' + tutor_name
    else:
        y_top = y_top_2345
        number_max = number_of_participants - 8 - (page_num-1)*16
        participants_on_page = min(number_max, 16)
        y_list = linspace(y_top, y_bottom_2345, 16).tolist()[0:participants_on_page]
        i_start = 8 + (page_num-1)*16
        # Create the lists of elements that should be written on the newly created pdf
        input_Name_list = df.loc[i_start:i_start+participants_on_page-1, 'Name'].tolist()
        input_Mobile_list = df.loc[i_start:i_start+participants_on_page-1, 'Phone Number'].tolist()
        input_Country_list = df.loc[i_start:i_start+participants_on_page-1, 'Country of Origin'].tolist()
        input_Exchange_list = ['X'] * len(y_list)
        x_Exchange_list = [x_ERASMUS if exchange_type == 'Erasmus (Hochschule München!)' else x_Tutor if exchange_type == 'Tutor' else x_Other_Exchange for exchange_type in df.loc[i_start:i_start+15, 'Exchange Type']]

    x_Name_list = [x_Name] * len(y_list)
    x_Mobile_list = [x_Mobile] * len(y_list)
    x_Country_list = [x_Country] * len(y_list)


    x_list      = x_Name_list + x_Mobile_list + x_Country_list + x_Exchange_list
    y_list      = y_list + y_list + y_list + y_list
    text_list   = input_Name_list + input_Mobile_list + input_Country_list + input_Exchange_list

    # Add the Tutors in the Tutor line
    if page_num == 0:
        x_list.append(x_tutors)
        y_list.append(y_tutors)
        text_list.append(tutor_string)


    new_pdf = create_new_pdf_with_text_for_one_page(text_list, x_list, y_list)

    print('Merge the list of participants with the information of the excel to one pdf.')
    page = existing_pdf.pages[page_num]
    page.merge_page(new_pdf.pages[0])

    print(f'Add page {page_num+1} to the new pdf-file.')
    output.add_page(page)


print('Save created pdf.')
# Save newly generated pdf
output_stream = open(output_pdf_path, "wb")
output.write(output_stream)
output_stream.close()

