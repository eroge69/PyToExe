import subprocess
import sys

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import mss
except ImportError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'mss' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    install('mss')
    import mss

try:
    import numpy as np
except ImportError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'numpy' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    install('numpy')
    import numpy as np

try:
    import pyautogui
except ImportError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'pyautogui' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    install('pyautogui')
    import pyautogui

try:
    import keyboard
except ImportError:
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'keyboard' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    install('keyboard')
    import keyboard

import time
import threading

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
green_color = np.array([35, 168, 83])  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç (RGB)
white_color = np.array([255, 255, 255])  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç (RGB)
region = {"top": 584, "left": 814, "width": 150, "height": 320}  # –û–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
hotkey = "space"  # –ö–ª–∞–≤–∏—à–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
extra_key = "e"  # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
tolerance = 53  # –î–æ–ø—É—Å–∫ –ø–æ —Ü–≤–µ—Ç—É
check_offset = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –≤–≤–µ—Ä—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–ª–æ–≥–æ
pre_press_delay = 0.05  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º (—Å–µ–∫.)
extra_key_delay = 11  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–∂–∞—Ç–∏—è 'e' (—Å–µ–∫.)
start_stop_key = "F8"  # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
running = False  # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
def is_color_match(pixel, target, tolerance):
    return np.all(np.abs(pixel - target) <= tolerance)

def check_screen():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å, –∏—â–µ—Ç —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–ª—ã–π –≤—ã—à–µ."""
    with mss.mss() as sct:
        screenshot = sct.grab(region)
        img = np.array(screenshot)[:, :, :3]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ RGB

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–µ–ª–µ–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        green_mask = np.all(np.abs(img - green_color) <= tolerance, axis=-1)

        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∑–µ–ª–µ–Ω—ã–π –ø–∏–∫—Å–µ–ª—å –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ
        green_positions = np.argmax(green_mask, axis=0)  # –ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ True –ø–æ –æ—Å–∏ Y

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –≤—ã—à–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–µ–ª–µ–Ω–æ–≥–æ
        for x in range(img.shape[1]):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
            y = green_positions[x]  # –í–µ—Ä—Ö–Ω–∏–π –∑–µ–ª–µ–Ω—ã–π –ø–∏–∫—Å–µ–ª—å –≤ —ç—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ
            if y > 0 and y - check_offset >= 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã—à–µ
                if is_color_match(img[y - check_offset, x], white_color, tolerance):
                    screen_x = region["left"] + x
                    screen_y = region["top"] + y
                    print(f"‚ö† –ë–µ–ª—ã–π —Ü–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞–¥ –∑–µ–ª—ë–Ω—ã–º ({screen_x}, {screen_y - 5})! "
                          f"–ñ–¥—É {pre_press_delay} —Å–µ–∫. –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º {hotkey}")

                    time.sleep(pre_press_delay)  # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º
                    pyautogui.press(hotkey)  # –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
                    return True
    return False

def monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–∞."""
    global running
    while running:
        check_screen()
        time.sleep(0.01)  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (100 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)

def press_extra_key():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è 'E' –∫–∞–∂–¥—ã–µ 11 —Å–µ–∫—É–Ω–¥."""
    global running
    while running:
        print(f"üîÑ –ù–∞–∂–∞—Ç–∏–µ '{extra_key}' (–∫–∞–∂–¥—ã–µ {extra_key_delay} —Å–µ–∫.)")
        pyautogui.press(extra_key)
        time.sleep(extra_key_delay)

def toggle_running():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    global running
    if running:
        print("‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        running = False
    else:
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        running = True
        threading.Thread(target=monitor, daemon=True).start()
        threading.Thread(target=press_extra_key, daemon=True).start()

# –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
keyboard.add_hotkey(start_stop_key, toggle_running)

print(f"üî¥ –ù–∞–∂–º–∏—Ç–µ {start_stop_key} –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞.")
keyboard.wait()  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à