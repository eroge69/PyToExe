import os
import sys
import requests
import phonenumbers
from phonenumbers import carrier, geocoder, timezone
from PyQt5.QtWidgets import (QApplication, QMainWindow, QLabel, QLineEdit, 
                            QPushButton, QVBoxLayout, QWidget, QTextEdit)
from PyQt5.QtGui import QFont, QColor, QPalette, QLinearGradient, QBrush
from PyQt5.QtCore import Qt
from faker import Faker
import random

fake = Faker()

class GradientWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üîç PhoneLookup PRO")
        self.setGeometry(100, 100, 800, 600)
        self.setWindowIcon(QIcon("icon.ico"))  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª icon.ico
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        self.setAutoFillBackground(True)
        palette = self.palette()
        gradient = QLinearGradient(0, 0, 0, self.height())
        gradient.setColorAt(0, QColor(40, 50, 60))
        gradient.setColorAt(1, QColor(20, 30, 40))
        palette.setBrush(QPalette.Window, QBrush(gradient))
        self.setPalette(palette)
        
        self.initUI()
    
    def initUI(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout()
        central_widget.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        title = QLabel("PhoneLookup PRO")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        title.setStyleSheet("color: #4fc3f7;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.phone_input = QLineEdit()
        self.phone_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä +79123456789)")
        self.phone_input.setStyleSheet("""
            QLineEdit {
                background: rgba(60, 70, 80, 180);
                color: white;
                border: 1px solid #555;
                border-radius: 10px;
                padding: 12px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 1px solid #4fc3f7;
            }
        """)
        layout.addWidget(self.phone_input)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        self.search_btn = QPushButton("–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        self.search_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4a76a8, stop:1 #3a6690);
                color: white;
                border: none;
                border-radius: 10px;
                padding: 12px;
                font-size: 16px;
                min-width: 200px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #5a86b8, stop:1 #4a7690);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #3a6690, stop:1 #2a5670);
            }
        """)
        self.search_btn.clicked.connect(self.search_phone)
        layout.addWidget(self.search_btn)
        
        # –ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_text = QTextEdit()
        self.result_text.setReadOnly(True)
        self.result_text.setStyleSheet("""
            QTextEdit {
                background: rgba(30, 40, 50, 180);
                color: #eee;
                border: 1px solid #444;
                border-radius: 10px;
                padding: 15px;
                font-family: Consolas, 'Courier New', monospace;
            }
        """)
        layout.addWidget(self.result_text)
    
    def append_colored_text(self, text, color):
        self.result_text.moveCursor(QTextCursor.End)
        self.result_text.setTextColor(color)
        self.result_text.insertPlainText(text + "\n")
        self.result_text.setTextColor(QColor("#eee"))
    
    def search_phone(self):
        phone = self.phone_input.text()
        if not phone:
            self.append_colored_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", QColor("#e74c3c"))
            return
        
        try:
            self.result_text.clear()
            self.append_colored_text("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...", QColor("#4fc3f7"))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞
            parsed_num = phonenumbers.parse(phone, None)
            if not phonenumbers.is_valid_number(parsed_num):
                self.append_colored_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", QColor("#e74c3c"))
                return
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.append_colored_text("\n=== –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===", QColor("#4fc3f7"))
            
            country = geocoder.country_name_for_number(parsed_num, "ru") or "–ù–ï –ù–ê–ô–î–ï–ù–û"
            operator = carrier.name_for_number(parsed_num, "ru") or "–ù–ï –ù–ê–ô–î–ï–ù–û"
            timezone_info = timezone.time_zones_for_number(parsed_num) or ["–ù–ï –ù–ê–ô–î–ï–ù–û"]
            
            self.append_colored_text(f"üì± –ù–æ–º–µ—Ä: {phonenumbers.format_number(parsed_num, phonenumbers.PhoneNumberFormat.INTERNATIONAL)}", 
                                   QColor("#2ecc71"))
            self.append_colored_text(f"üåç –°—Ç—Ä–∞–Ω–∞: {country}", 
                                   QColor("#2ecc71") if country != "–ù–ï –ù–ê–ô–î–ï–ù–û" else QColor("#e74c3c"))
            self.append_colored_text(f"üì∂ –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}", 
                                   QColor("#2ecc71") if operator != "–ù–ï –ù–ê–ô–î–ï–ù–û" else QColor("#e74c3c"))
            self.append_colored_text(f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {', '.join(timezone_info)}", 
                                   QColor("#2ecc71") if timezone_info[0] != "–ù–ï –ù–ê–ô–î–ï–ù–û" else QColor("#e74c3c"))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if random.random() > 0.3:  # 70% —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ
                self.append_colored_text("\n=== –õ–ò–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===", QColor("#4fc3f7"))
                
                # –§–ò–û
                name = fake.name()
                self.append_colored_text(f"üë§ –§–ò–û: {name}", QColor("#2ecc71"))
                
                # –ê–¥—Ä–µ—Å
                address = fake.address().replace("\n", ", ")
                self.append_colored_text(f"üè† –ê–¥—Ä–µ—Å: {address}", QColor("#2ecc71"))
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
                if random.random() > 0.5:
                    second_phone = f"+7{random.randint(900, 999)}{random.randint(1000000, 9999999)}"
                    self.append_colored_text(f"üì± –î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω: {second_phone}", QColor("#3498db"))
                
                # –¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                if random.random() > 0.6:
                    parents_phone = f"+7{random.randint(900, 999)}{random.randint(1000000, 9999999)}"
                    self.append_colored_text(f"üë™ –¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {parents_phone}", QColor("#3498db"))
                
                # –°–æ—Ü—Å–µ—Ç–∏
                if random.random() > 0.4:
                    self.append_colored_text("\n=== –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò ===", QColor("#4fc3f7"))
                    networks = random.sample(["VK", "Telegram", "WhatsApp", "Instagram"], random.randint(1, 3))
                    for net in networks:
                        self.append_colored_text(f"‚Ä¢ {net}: {fake.user_name()}", QColor("#3498db"))
            else:
                self.append_colored_text("\n‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", QColor("#e74c3c"))
            
            self.append_colored_text("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω", QColor("#2ecc71"))
            
        except Exception as e:
            self.append_colored_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", QColor("#e74c3c"))

def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = GradientWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()