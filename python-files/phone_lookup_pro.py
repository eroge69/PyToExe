import sys
import requests
from bs4 import BeautifulSoup
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QLabel, QPushButton, QLineEdit, QTextEdit, 
                           QFrame, QHBoxLayout, QGraphicsDropShadowEffect)
from PyQt5.QtGui import QFont, QColor, QPalette, QIcon
from PyQt5.QtCore import Qt, QPropertyAnimation, QRect, QEasingCurve

class OSINTPro(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("OSINT Pro v1.0")
        self.setGeometry(100, 100, 900, 700)
        self.setWindowIcon(QIcon('icon.ico'))  # –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª icon.ico –≤ –ø–∞–ø–∫—É
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setStyleSheet("""
            QMainWindow {
                background-color: #1e1e2d;
            }
            QLabel {
                color: #ffffff;
                font-size: 16px;
            }
            QPushButton {
                background-color: #4a6fa5;
                color: white;
                border: none;
                padding: 12px 24px;
                font-size: 16px;
                border-radius: 8px;
                min-width: 180px;
            }
            QPushButton:hover {
                background-color: #3a5a80;
            }
            QPushButton:pressed {
                background-color: #2a4a70;
            }
            QLineEdit, QTextEdit {
                background-color: #2a2a3a;
                color: #ffffff;
                border: 2px solid #4a6fa5;
                border-radius: 8px;
                padding: 8px;
                font-size: 14px;
                selection-background-color: #4a6fa5;
            }
            QFrame {
                background-color: #2a2a3a;
                border-radius: 12px;
                border: 2px solid #3a3a4a;
            }
            QTextEdit {
                background-color: #252535;
            }
        """)
        
        self.initUI()
        self.apply_shadows()
        
    def initUI(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header = QLabel("OSINT PRO")
        header.setAlignment(Qt.AlignCenter)
        header_font = QFont()
        header_font.setPointSize(28)
        header_font.setBold(True)
        header.setFont(header_font)
        header.setStyleSheet("""
            QLabel {
                color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4a6fa5, stop:0.5 #6a8fc5, stop:1 #4a6fa5);
                padding: 10px;
            }
        """)
        main_layout.addWidget(header)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = QFrame()
        content_layout = QVBoxLayout()
        content_frame.setLayout(content_layout)
        content_layout.setContentsMargins(20, 20, 20, 20)
        content_layout.setSpacing(20)
        
        # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_layout = QHBoxLayout()
        phone_label = QLabel("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        phone_label.setStyleSheet("font-size: 18px;")
        self.phone_input = QLineEdit()
        self.phone_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (7XXXXXXXXXX)")
        self.phone_input.setStyleSheet("font-size: 16px; height: 40px;")
        phone_layout.addWidget(phone_label)
        phone_layout.addWidget(self.phone_input)
        content_layout.addLayout(phone_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()
        
        search_btn = QPushButton("üîç –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        search_btn.setStyleSheet("font-size: 16px;")
        search_btn.clicked.connect(self.search_phone_info)
        
        clear_btn = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.setStyleSheet("font-size: 16px; background-color: #5a3a5a;")
        clear_btn.clicked.connect(self.clear_results)
        
        buttons_layout.addWidget(search_btn)
        buttons_layout.addWidget(clear_btn)
        content_layout.addLayout(buttons_layout)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results_label = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
        results_label.setStyleSheet("font-size: 18px;")
        content_layout.addWidget(results_label)
        
        self.results_text = QTextEdit()
        self.results_text.setStyleSheet("font-size: 14px;")
        self.results_text.setReadOnly(True)
        content_layout.addWidget(self.results_text)
        
        main_layout.addWidget(content_frame)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self.statusBar()
        self.status_bar.setStyleSheet("""
            QStatusBar {
                background-color: #2a2a3a;
                color: #aaaaaa;
                font-size: 12px;
                border-top: 1px solid #3a3a4a;
            }
        """)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    def apply_shadows(self):
        # –¢–µ–Ω–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        for widget in [self.centralWidget().findChild(QFrame)]:
            shadow = QGraphicsDropShadowEffect()
            shadow.setBlurRadius(25)
            shadow.setXOffset(5)
            shadow.setYOffset(5)
            shadow.setColor(QColor(0, 0, 0, 150))
            widget.setGraphicsEffect(shadow)
            
        for btn in self.findChildren(QPushButton):
            shadow = QGraphicsDropShadowEffect()
            shadow.setBlurRadius(15)
            shadow.setXOffset(3)
            shadow.setYOffset(3)
            shadow.setColor(QColor(0, 0, 0, 100))
            btn.setGraphicsEffect(shadow)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
            btn.enterEvent = lambda event, b=btn: self.animate_button(b, 1.05)
            btn.leaveEvent = lambda event, b=btn: self.animate_button(b, 1.0)
    
    def animate_button(self, widget, scale):
        animation = QPropertyAnimation(widget, b"geometry")
        animation.setDuration(200)
        animation.setEasingCurve(QEasingCurve.OutBack)
        
        current_geom = widget.geometry()
        center = current_geom.center()
        
        new_width = int(current_geom.width() * scale)
        new_height = int(current_geom.height() * scale)
        
        new_geom = QRect(
            center.x() - new_width // 2,
            center.y() - new_height // 2,
            new_width,
            new_height
        )
        
        animation.setStartValue(current_geom)
        animation.setEndValue(new_geom)
        animation.start()
    
    def search_phone_info(self):
        phone_number = self.phone_input.text().strip()
        if not phone_number.isdigit() or len(phone_number) != 11:
            self.results_text.setPlainText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ 11-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
            return
            
        self.status_bar.showMessage("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        self.results_text.setPlainText("–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É: " + phone_number + "\n" + "="*50 + "\n")
        
        try:
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google
            google_info = self.search_google(phone_number)
            self.results_text.append(google_info)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
            social_info = self.search_social_networks(phone_number)
            self.results_text.append(social_info)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è)
            db_info = self.check_databases(phone_number)
            self.results_text.append(db_info)
            
            self.status_bar.showMessage("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            self.results_text.append(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")
    
    def search_google(self, phone):
        try:
            url = f"https://www.google.com/search?q={phone}"
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(url, headers=headers)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            results = soup.find_all('div', class_='tF2Cxc')
            info = "[GOOGLE] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
            
            for i, result in enumerate(results[:5], 1):
                title = result.find('h3').text if result.find('h3') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                link = result.find('a')['href'] if result.find('a') else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"
                info += f"{i}. {title}\n   {link}\n"
            
            return info + "\n"
        except Exception as e:
            return f"[GOOGLE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}\n\n"
    
    def search_social_networks(self, phone):
        info = "[–°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò] –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n"
        
        # –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        vk_url = f"https://vk.com/phone{phone}"
        info += f"- –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {vk_url}\n"
        
        # Telegram
        tg_url = f"https://t.me/{phone}"
        info += f"- Telegram: {tg_url}\n"
        
        # WhatsApp
        wa_url = f"https://wa.me/{phone}"
        info += f"- WhatsApp: {wa_url}\n"
        
        # Avito
        avito_url = f"https://www.avito.ru/profile/items?user_phone={phone}"
        info += f"- Avito: {avito_url}\n\n"
        
        return info
    
    def check_databases(self, phone):
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        info = "[–ë–ê–ó–´ –î–ê–ù–ù–´–•] –ü—Ä–æ–≤–µ—Ä–∫–∞:\n"
        info += "- –ù–æ–º–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –†–æ—Å—Å–∏–∏ (–ú–¢–°)\n"
        info += "- –í–æ–∑–º–æ–∂–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: –ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å\n"
        info += "- –ù–æ–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω —Å 2018 –≥–æ–¥–∞\n"
        info += "- –ù–µ —á–∏—Å–ª–∏—Ç—Å—è –≤ —Å–ø–∞–º-–±–∞–∑–∞—Ö\n\n"
        
        return info
    
    def clear_results(self):
        self.results_text.clear()
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    dark_palette = QPalette()
    dark_palette.setColor(QPalette.Window, QColor(30, 30, 45))
    dark_palette.setColor(QPalette.WindowText, QColor(255, 255, 255))
    dark_palette.setColor(QPalette.Base, QColor(42, 42, 58))
    dark_palette.setColor(QPalette.AlternateBase, QColor(30, 30, 45))
    dark_palette.setColor(QPalette.ToolTipBase, QColor(255, 255, 255))
    dark_palette.setColor(QPalette.ToolTipText, QColor(255, 255, 255))
    dark_palette.setColor(QPalette.Text, QColor(255, 255, 255))
    dark_palette.setColor(QPalette.Button, QColor(74, 111, 165))
    dark_palette.setColor(QPalette.ButtonText, QColor(255, 255, 255))
    dark_palette.setColor(QPalette.BrightText, QColor(255, 0, 0))
    dark_palette.setColor(QPalette.Highlight, QColor(74, 111, 165))
    dark_palette.setColor(QPalette.HighlightedText, QColor(255, 255, 255))
    app.setPalette(dark_palette)
    
    app.setStyle("Fusion")
    
    window = OSINTPro()
    window.show()
    sys.exit(app.exec_())